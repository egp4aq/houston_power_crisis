---
title: "Homework 3"
format: html
author: Liz Peterson
date: 10-23-2024
editor_options: 
  chunk_output_type: console
---

## Load libraries
```{r}
# Read in all necessary libraries
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tmap)
library(spData)
library(spDataLarge)
library(stars)
```

## Read in data
```{r}
# Read in roads data with query to only select highways 
roads <- st_read(here('data','gis_osm_roads_free_1.gpkg'), query = "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'")

# Read in houses data with query to only select homes 
houses <- st_read(here('data','gis_osm_buildings_a_free_1.gpkg'), query = "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')")

# Read in socioeconomic data
texas <- st_read(here('data','ACS_2019_5YR_TRACT_48_TEXAS.gdb'), layer = 'ACS_2019_5YR_TRACT_48_TEXAS')
income <- st_read(here('data','ACS_2019_5YR_TRACT_48_TEXAS.gdb'), layer = "X19_INCOME")

# Check class of these terms to make sure they are correct
class(texas)
class(income)
                 
# Read in lights data --> there are two separate tiles for the same date
seven_05_tile <- read_stars(here("data/VNP46A1/VNP46A1.A2021038.h08v05.001.2021039064328.tif")) 
seven_06_tile <- read_stars(here("data/VNP46A1/VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
sixteen_05_tile <- read_stars(here("data/VNP46A1/VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
sixteen_06_tile <- read_stars(here("data/VNP46A1/VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
```

```{r}
# Merge the two tiles for the same date to create a workable raster
tile_07 <- rast(st_mosaic(seven_05_tile, seven_06_tile))
tile_16 <- rast(st_mosaic(sixteen_05_tile, sixteen_06_tile))
```

```{r}
# Check CRS for what we've read in
print(st_crs(houses) == st_crs(texas))
print(st_crs(tile_07) == st_crs(texas))
print(st_crs(tile_16) == st_crs(texas))
print(st_crs(tile_07) == st_crs(tile_16))
```

```{r}
# Because the two tile rasters have the same CRS, we will use those as the refernce, and update houses and texas to have that same CRS
houses <- st_transform(houses, st_crs(tile_07))
texas <- st_transform(texas, st_crs(tile_07))
```

```{r}
# Run another check to make sure all CRS are now equal
# Create a list of all the rasters, and then create a for loop to make sure they all have the same crs, using the CRS of houses as a reference
rast_list <- list(houses,texas,tile_07,tile_16)
reference <- crs(rast_list[[1]])
for (i in 2:length(rast_list)) {
  print(crs(rast_list[[i]])==reference)
}
```

```{r}
# Check crs again
```

```{r}
# Using the plot function from terra directly
plot(tile_07, main = "Night Light Intensity - Before Storm")
plot(tile_16, main = "Night Light Intensity - After Storm")
```


```{r}
# Find the change in night lights intensity (presumably) caused by the storm
# Create a difference raster of the difference in intensity of those two nights
diff_rast <- tile_07 - tile_16
diff_rast[diff_rast < 200] <- NA
```

# Map the night light intensities before and after the storm
```{r}
# Plot raster using stars with tmap
tm_shape(tile_07) + 
  tm_raster(palette = "YlGnBu", title = "Night Light Intensity (Before Storm)")

tm_shape(tile_16) + 
  tm_raster(palette = "YlOrRd", title = "Night Light Intensity (After Storm)")

```

```{r}
# Vectorize the blackout mask (reclassified difference raster)
# First, convert to polygon so we can use st_as_sf()
blackout_mask_raster <- as.polygons(diff_rast, na.rm = TRUE)

blackout_mask <- blackout_mask_raster %>%
  st_as_sf(as_points = FALSE, merge = TRUE) %>%
  st_make_valid()
```

```{r}
# Initial map of blackout mask to make sure reclassification worked
tm_shape(blackout_mask) +
  tm_polygons()
```

```{r}
# Crop blackout mask to Houston area
# Create a matrix of our coordinates
bounding_box <- st_bbox(c(xmin = -96.5, xmax = -95.4, ymin = 29, ymax = 30.5),
                        crs = st_crs(blackout_mask)) %>%
  st_as_sfc()

# Change both the mask and bbox to have CRS 3083
blackout_mask <- st_transform(blackout_mask, crs = 3083)
bounding_box <- st_transform(bounding_box, crs = 3083)

# Check that CRS updating worked
print(st_crs(blackout_mask) == st_crs(bounding_box))

# Crop the raster
blackout_cropped <- st_intersection(blackout_mask, bounding_box)

# Make sure there are no invalid geometries
blackout_cropped <- st_make_valid(blackout_cropped)
```

```{r}
# Plot blackout cropped data to check analysis worked
tm_shape(blackout_cropped) +
  tm_polygons()
```

```{r}
# Check CRS before transformation
print(st_crs(roads))  # Should match CRS of blackout mask
print(st_crs(blackout_mask))  # Should match CRS of roads
print(st_crs(bounding_box))  # Should match CRS of blackout mask and roads

# Another chance to transform CRS
roads <- st_transform(roads, crs = st_crs(blackout_mask))
blackout_mask <- st_transform(blackout_mask, crs = st_crs(roads))
bounding_box <- st_transform(bounding_box, crs = st_crs(blackout_mask))
```

```{r}
# Check if all layers align visually
tm_shape(roads) +
  tm_lines() +
  tm_layout() +
tm_shape(blackout_mask) +
  tm_borders(col = "blue") +
  tm_layout()

```


## Exclude highways from the cropped blackout mask
```{r}
# Create a 200-meter buffer around highways
roads_buffer <- st_buffer(roads, dist = 200)
roads_buffer <- st_transform(roads_buffer, st_crs(blackout_cropped))

# Make sure there are no issues with invalid geometries
roads_buffer <- st_make_valid(roads_buffer)

mask_wo_hwys <- st_difference(blackout_cropped, roads_buffer)
```

## Identify homes likely impacted by blackouts
```{r}

```

## Identify the census tracts likely impacted by blackout
```{r}

```


